"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[3848],{2838:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>s,metadata:()=>n,toc:()=>o});const n=JSON.parse('{"id":"tutorial-extras/orm-and-model","title":"Orm: Object Regional Mapping and Models","description":"The aim is to make accessing database easier and more friendly using objects.","source":"@site/docs/tutorial-extras/orm-and-model.md","sourceDirName":"tutorial-extras","slug":"/tutorial-extras/orm-and-model","permalink":"/pashmak/docs/tutorial-extras/orm-and-model","draft":false,"unlisted":false,"editUrl":"https://github.com/devbro1/pashmak/blob/master/docs/docs/tutorial-extras/orm-and-model.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"File Storage","permalink":"/pashmak/docs/tutorial-extras/file-storage"}}');var r=t(2540),d=t(3023);const s={sidebar_position:2},i="Orm: Object Regional Mapping and Models",l={},o=[{value:"primary key",id:"primary-key",level:2},{value:"guarded",id:"guarded",level:2},{value:"toJson()",id:"tojson",level:2},{value:"save()",id:"save",level:2},{value:"delete()",id:"delete",level:2},{value:"table name",id:"table-name",level:2},{value:"creating a new model",id:"creating-a-new-model",level:2},{value:"Generally Available methods",id:"generally-available-methods",level:2},{value:"refresh()",id:"refresh",level:3},{value:"find() / findByPrimaryKey()",id:"find--findbyprimarykey",level:3},{value:"findOrFail()",id:"findorfail",level:3},{value:"findOne()",id:"findone",level:3},{value:"getQuery()",id:"getquery",level:3},{value:"fill()",id:"fill",level:3},{value:"<code>created_at</code> and <code>updated_at</code> timestamps",id:"created_at-and-updated_at-timestamps",level:3},{value:"Casters and Mutators",id:"casters-and-mutators",level:2}];function c(e){const a={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",mermaid:"mermaid",p:"p",pre:"pre",ul:"ul",...(0,d.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(a.header,{children:(0,r.jsx)(a.h1,{id:"orm-object-regional-mapping-and-models",children:"Orm: Object Regional Mapping and Models"})}),"\n",(0,r.jsx)(a.p,{children:"The aim is to make accessing database easier and more friendly using objects."}),"\n",(0,r.jsx)(a.p,{children:"to create a new model:"}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-typescript",children:'import { BaseModel, Attribute } from "neko-orm/src";\n\nexport class User extends BaseModel {\n  protected guarded: string[] = ["password"];\n\n  @Attribute({ primaryKey: true, incrementingPrimaryKey: true })\n  declare id: number;\n\n  @Attribute()\n  declare username: string;\n\n  @Attribute()\n  active: boolean = true;\n\n  @Attribute()\n  declare password: string;\n}\n'})}),"\n",(0,r.jsx)(a.p,{children:"every attribute that comes from database must get a @Attribute() decorator. It will tell the model what needs to be loaded or saved to database."}),"\n",(0,r.jsx)(a.h2,{id:"primary-key",children:"primary key"}),"\n",(0,r.jsxs)(a.p,{children:["every model will need a unique identified that you mark using ",(0,r.jsx)(a.code,{children:"primaryKey:true"}),". If the value of your primary key is auto-calculated in the database during insert, then ",(0,r.jsx)(a.code,{children:"incrementingPrimaryKey: true"})," will let model know to get the newly generated id after create."]}),"\n",(0,r.jsx)(a.h2,{id:"guarded",children:"guarded"}),"\n",(0,r.jsx)(a.p,{children:"if you want to mark a attribute as sensetive, you can use guarded to tell the model to not include it when we call toJson();"}),"\n",(0,r.jsx)(a.h2,{id:"tojson",children:"toJson()"}),"\n",(0,r.jsxs)(a.p,{children:["you can convert a model object to a json using ",(0,r.jsx)(a.code,{children:"toJson()"})," to send or save clean data."]}),"\n",(0,r.jsx)(a.h2,{id:"save",children:"save()"}),"\n",(0,r.jsx)(a.p,{children:"to save your data to database, if it is an object that was retrieved from database, then it will update database."}),"\n",(0,r.jsx)(a.h2,{id:"delete",children:"delete()"}),"\n",(0,r.jsx)(a.p,{children:"to delete the model from database. data still reside in the object."}),"\n",(0,r.jsx)(a.h2,{id:"table-name",children:"table name"}),"\n",(0,r.jsx)(a.p,{children:"table name is auto calculated as plural of the model name. so Country model will look rows from countries table."}),"\n",(0,r.jsx)(a.p,{children:"if you want to override the table name:"}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{children:"protected tableName: string = 'mars_countries';\n"})}),"\n",(0,r.jsx)(a.h2,{id:"creating-a-new-model",children:"creating a new model"}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{children:"let user = new User();\nuser.fill({ username: 'meowadmin' });\n// or\nlet user = new User({ username: 'meowadmin' });\n"})}),"\n",(0,r.jsx)(a.p,{children:"only parameters marked with @attribute will be filled."}),"\n",(0,r.jsx)(a.h2,{id:"generally-available-methods",children:"Generally Available methods"}),"\n",(0,r.jsx)(a.h3,{id:"refresh",children:"refresh()"}),"\n",(0,r.jsx)(a.p,{children:"sometimes you need to reload data from database. you can do this by"}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-ts",children:'console.log(user.username); // meow\nuser.username = "newusername";\nconsole.log(user.username); // newusername\nawait user.refresh();\nconsole.log(user.username); // meow\n'})}),"\n",(0,r.jsx)(a.h3,{id:"find--findbyprimarykey",children:"find() / findByPrimaryKey()"}),"\n",(0,r.jsxs)(a.p,{children:["assuming you are using ",(0,r.jsx)(a.code,{children:"id"})," as your primary key, you can find objects by id"]}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-ts",children:"await User.find(123);\nawait User.findByPrimaryKey(123);\n"})}),"\n",(0,r.jsx)(a.p,{children:"if find fails, it will return undefined"}),"\n",(0,r.jsx)(a.h3,{id:"findorfail",children:"findOrFail()"}),"\n",(0,r.jsxs)(a.p,{children:["same as ",(0,r.jsx)(a.code,{children:"find()"})," but will throw an error on failure"]}),"\n",(0,r.jsx)(a.h3,{id:"findone",children:"findOne()"}),"\n",(0,r.jsx)(a.p,{children:"it will return the first object that matches the search matches you provide."}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-ts",children:'await USer.findOne({ username: "meowadmin" });\n'})}),"\n",(0,r.jsx)(a.p,{children:"note: the search parameters need to be exact match. they also can be anything defined in database but not in your model."}),"\n",(0,r.jsx)(a.h3,{id:"getquery",children:"getQuery()"}),"\n",(0,r.jsx)(a.p,{children:"returns a query object with table predefined"}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-ts",children:"await User.getQuery();\n"})}),"\n",(0,r.jsx)(a.h3,{id:"fill",children:"fill()"}),"\n",(0,r.jsx)(a.p,{children:"to mass field parameters in a object"}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-ts",children:'user.fill({ email: "meow@devbro.com" });\n'})}),"\n",(0,r.jsxs)(a.h3,{id:"created_at-and-updated_at-timestamps",children:[(0,r.jsx)(a.code,{children:"created_at"})," and ",(0,r.jsx)(a.code,{children:"updated_at"})," timestamps"]}),"\n",(0,r.jsxs)(a.p,{children:["every model comes with standard ",(0,r.jsx)(a.code,{children:"created_at"})," and ",(0,r.jsx)(a.code,{children:"updated_at"})," fields. you can use these fields to track when they were created and updated last."]}),"\n",(0,r.jsx)(a.p,{children:"to modify standard behaviors you can define your models as such:"}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-ts",children:'class Animal extends BaseModel {\n  protected hasTimestamps = true;\n  protected timestampFormat = "yyyy-MM-dd HH:mm:ss.SSS";\n  protected createdAtFieldName = "created_at";\n  protected updatedAtFieldName = "updated_at";\n\n  @Attribute()\n  declare created_at: Date;\n\n  @attribute()\n  declare updated_at: Date;\n}\n'})}),"\n",(0,r.jsxs)(a.ul,{children:["\n",(0,r.jsx)(a.li,{children:"hasTimestamps: controls if class has time stamp fields or not. you can set to false if your model does not have these fields."}),"\n",(0,r.jsx)(a.li,{children:"timestampFormat: the format timestamp needs to be converted to in string before inserting to database."}),"\n",(0,r.jsx)(a.li,{children:"createdAtFieldName: the field name that will contain created_at date"}),"\n",(0,r.jsx)(a.li,{children:"updatedAtFeildName: the field name that contains updated_at date"}),"\n"]}),"\n",(0,r.jsx)(a.p,{children:"these values are calculated automatically during save(). if save() is successfull created_at and updated_at will be adjust in the model."}),"\n",(0,r.jsx)(a.p,{children:"if you want to run save() without update timestamps then:"}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-ts",children:"await cat.save({ updateTimestamps: false });\n"})}),"\n",(0,r.jsx)(a.h2,{id:"casters-and-mutators",children:"Casters and Mutators"}),"\n",(0,r.jsx)(a.p,{children:"casters can be used to modify the field when we read it from database.\nmutators can be used to modify the data when we write it to database."}),"\n",(0,r.jsx)(a.mermaid,{value:"graph LR\n  Controller --\x3e Model\n  Model --\x3e|Caster| Database\n  Database --\x3e|Mutator| Model\n  Model --\x3e Controller"}),"\n",(0,r.jsx)(a.p,{children:"you can define casters and mutators for an attributes"}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-ts",children:"@attributes({\n  caster: (val: Date) => val.toISOString(),\n  mutator: (val: string) => paraseStringToDate(val),\n})\ndeclare date_of_birth: Date;\n"})})]})}function u(e={}){const{wrapper:a}={...(0,d.R)(),...e.components};return a?(0,r.jsx)(a,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},3023:(e,a,t)=>{t.d(a,{R:()=>s,x:()=>i});var n=t(3696);const r={},d=n.createContext(r);function s(e){const a=n.useContext(d);return n.useMemo((function(){return"function"==typeof e?e(a):{...a,...e}}),[a,e])}function i(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),n.createElement(d.Provider,{value:a},e.children)}}}]);